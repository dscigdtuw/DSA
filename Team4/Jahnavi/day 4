Q1. Valid Pallindrome 
https://leetcode.com/problems/valid-palindrome/
class Solution {
public:
    bool isPalindrome(string s) {
        string temp;
        for(int i=0;i<s.length();i++) 
        {
            if(isalnum(s[i])) temp.push_back(s[i]);
        }
       // cout<<temp<<endl;
        transform(temp.begin(),temp.end(),temp.begin(),::tolower);
        for(int i=0,j=temp.length()-1;i<=j;i++,j--)
        {
            if(temp[i]!=temp[j]) {
                cout<<temp[i]<<" "<<temp[j];
                return false;
            }
        }
        return true;
    }
};
Q.2 Reverse Vowels of a String
https://leetcode.com/problems/reverse-vowels-of-a-string/
class Solution {
public:
    bool isVowel(char ch)
    {
       if(ch=='a'||ch=='e'||ch=='i'||ch=='o'||ch=='u'||ch=='A'||ch=='E'||ch=='I'||ch=='O'||ch=='U') 
           return true;
        else return false;
    }
    string reverseVowels(string s) {
        int i=0;
        int j=s.length()-1;
        while(i<j) 
        {
            if(isVowel(s[i])&&isVowel(s[j])) 
            {
                swap(s[i],s[j]);
                i++;
                j--;
                
            }
            else if(isVowel(s[i])) j--;
            else if(isVowel(s[j])) i++;
            else 
            {
                i++;
                j--;
            }
            
        }
        return s;
    }
};
Q.3 XOR Operarion in an array 
https://leetcode.com/problems/xor-operation-in-an-array/
class Solution {
public:
    int xorOperation(int n, int start) {
        int arr[n];
        for(int i=0;i<n;i++) 
        {
            arr[i]=start+2*i;
        }
        int x=0;
        for(int i=0;i<n;i++) 
        {
            x=x^arr[i];
        }
        return x;
    }
};
Q.4 Create Target Array in the given order 
https://leetcode.com/problems/create-target-array-in-the-given-order/
class Solution {
public:
    vector<int> createTargetArray(vector<int>& nums, vector<int>& index) {
       int n= nums.size();
        vector<int>v;
      
        for(int i=0;i<n;i++) 
        {
            v.insert(v.begin()+index[i],nums[i]);
        }
        return v;
    }
};
