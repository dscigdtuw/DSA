Q1. rotate array   https://leetcode.com/problems/rotate-array/
class Solution {
public:
    void rotate(vector<int>& nums, int k) {
        int n=nums.size();
        if(k>n) k=k%n;
        reverse(nums.begin(),nums.end());
        reverse(nums.begin(),nums.begin()+k);
        reverse(nums.begin()+k,nums.end());
    }
};
Q2. count negative integers   https://leetcode.com/problems/count-negative-numbers-in-a-sorted-matrix/
class Solution {
public:
    int countNegatives(vector<vector<int>>& grid) {
        int cnt=0;
        for(int i=0;i<grid.size();i++) 
        {
            for(int j=0;j<grid[i].size();j++) 
            {
                if(grid[i][j]<0) cnt++;
            }
        }
        return cnt;
    }
};
Q3. Maximum subarray    https://leetcode.com/problems/maximum-subarray/
class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        int mx=INT_MIN;
        int cur_sum=0;
        for(int i=0;i<nums.size();i++) 
        {
            cur_sum=cur_sum+nums[i];
            if(cur_sum>mx) mx=cur_sum;
            
            if(cur_sum<0) cur_sum=0;
            
        }
       return mx; 
    }
};
Q4. Sieve of Eratosthenes   https://practice.geeksforgeeks.org/problems/sieve-of-eratosthenes5242/1
class Solution
{
public:
    vector<int> sieveOfEratosthenes(int n)
    {  vector<int>v;
        // Write Your Code here
        bool prime[n+1];
        for(int i=0;i<n+1;i++) prime[i]=true;
        for(int i=2;i*i<n;i++) 
        {
            if(prime[i]==true) 
            {
                for(int j=i*i;j<=n;j+=i) 
                {
                    prime[j]=false;
                }
            }
        }
        for(int i=2;i<=n;i++) 
        {
            if(prime[i]==true) v.push_back(i);
        }
        return v;
    }
};
