Q1 Missing Numbers 
https://leetcode.com/problems/missing-number/
class Solution {
public:
    int missingNumber(vector<int>& nums) {
        int sum=0;
        int n=nums.size();
        for(int i=0;i<n;i++)
        {
                sum=sum+nums[i];
        }
        return (n*(n+1)/2)-sum;
    }
};
2. Remove Duplicates from Sorted Array 
https://leetcode.com/problems/remove-duplicates-from-sorted-array/
class Solution {
public:
    int removeDuplicates(vector<int>& nums) {
       if(nums.size()<=1) return nums.size();
      //  int c=0;
        int i=0;
      for(int j=1;j<nums.size();j++) 
      {
          if(nums[i]!=nums[j]){ i++;
                               nums[i]=nums[j];
                              }
          
         
      }
        return i+1;
    }
};
3. Spiral Matrix
https://leetcode.com/problems/spiral-matrix/
class Solution {
public:
    vector<int> spiralOrder(vector<vector<int>>& matrix) {
        vector<int>v;
       int r=matrix.size();
        int c=r?matrix[0].size():0;
        int sr=0,er=r-1,sc=0,ec=c-1;
        while(sr<=er&&sc<=ec)
    {
 for(int i=sc;i<=ec;i++)
            v.push_back(matrix[sr][i]);
    sr++;
    for(int i=sr;i<=er;i++)
        v.push_back(matrix[i][ec]);
    ec--;
 if(sr<=er){
    for(int i=ec;i>=sc;i--)
        v.push_back(matrix[er][i]);
    er--;
 }
 if(sc<=ec)
 {
    for(int i=er;i>=sr;i--)
        v.push_back(matrix[i][sc]);
    sc++;
 }

    }
        return v;
    
        }
};
