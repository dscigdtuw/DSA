Ques-1 Move zeroes

class Solution {
    public void moveZeroes(int[] nums) {
        int zeroPointer = 0;
        int end = nums.length - 1;
        
        while (zeroPointer <= end) {
            if(nums[zeroPointer] == 0) {
                break;
            }
            zeroPointer ++;
        }
        int numPointer = zeroPointer+1;
        while(numPointer <= end) {
            if(nums[numPointer] != 0) {
                nums[zeroPointer] = nums[numPointer];
                nums[numPointer] = 0;
                zeroPointer++;
            }
            numPointer++;
        }
    }
}

Ques-2 Find pivot index

class Solution {
public int pivotIndex(int[] nums) {
int sum=0,left_sum=0;
for(int i:nums){
sum+=i;
}
for(int i=0;i<nums.length;i++){
sum-=nums[i];
if(sum==left_sum){
return i;
}
left_sum+=nums[i];
}
return -1;
}
}

Ques-3 Product of Array Except Self

class Solution {
public int[] productExceptSelf(int[] nums) {

    int prefix_product_array [] = new int [nums.length];
    int suffix = 1;
    prefix_product_array[0]=nums[0];
	
    for(int pos=1;pos<prefix_product_array.length;pos++)
    {
        prefix_product_array[pos]=prefix_product_array[pos-1] * nums[pos];
    }

    for(int pos = prefix_product_array.length-1 ; pos>0;pos--)
    {
        prefix_product_array[pos] = prefix_product_array[pos-1]*suffix;
        suffix*=nums[pos];
    }
    
     prefix_product_array[0] = suffix;

    return prefix_product_array;
}
}

Ques-4 Monotonic Array

class Solution {
    public boolean isMonotonic(int[] A) {
        boolean isDec = true, isIn = true;  
        for(int i=1;i<A.length;i++){
            isIn&=(A[i]>=A[i-1]);
            isDec&=(A[i]<=A[i-1]);
            if(!isIn && !isDec) return false;
        }
        return (isIn|isDec);
    }
}
