XOR operation

class Solution {
public:
    int xorOperation(int n, int start) {
        int nums[n];
        int res=0;
        for(int i=0;i<n;i++){
            nums[i]=start+2*i;
            res=res^nums[i];
        }
        return res;
    }
};


Target array in given order

class Solution {
public:
    vector<int> createTargetArray(vector<int>& nums, vector<int>& index) {
        vector <int> target;
        for(int i = 0; i < index.size(); i++){
            target.insert(target.begin()+index[i], nums[i]);
        } 
        return target;
    }
};


Valid Palindromes

class Solution {
public:
static bool isValid(char c){
if((c<='z'&&c>='a')||(c>='A'&&c<='Z')||(c>='0'&&c<='9')){
return true;
}
return false;
}
bool isPalindrome(string s) {
int start = 0;
int end = s.length()-1;

    while(start<end){
        if(!isValid(s[start])){
            start++;
        }else if(!isValid(s[end])){
            end--;
        }else if(tolower(s[start])!=tolower(s[end])){
            return false;
        }else if(tolower(s[start])==tolower(s[end])){
            start++;
            end--;
        }
        
    }
    
    return true;
}
};


Reverse vowels

class Solution {
public:
    string reverseVowels(string s) {
        string vovels{"aeiouAEIOU"};
        string::iterator startpos = s.begin();
        string::iterator endpos = s.end();
        while (startpos != endpos && (startpos - 1) != endpos){
            if (!(find(vovels.begin(), vovels.end(), *startpos) != vovels.end())) startpos++;
            else if (!(bool)(find(vovels.begin(), vovels.end(), *endpos) != vovels.end())) endpos--;
            else {
                swap(*startpos, *endpos);
                startpos++;
                endpos--;
            }
        }
        return s;
    }
};
